// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model usuarios {
  id_user        Int   @id @default(autoincrement())
  nombre        String
  rollid        Int
  disciplinaid  Int
  grupoid       Int

  // Relaciones
  diciplinas    diciplinas @relation(fields: [disciplinaid], references: [id_diciplinas], onDelete: Cascade)
  grupos        grupos @relation(fields: [grupoid], references: [id_grupo], onDelete: Cascade)
  roles         roles @relation(fields: [rollid], references: [id_rol], onDelete: Cascade)
}

model canchas {
  id_cancha     Int      @id @default(autoincrement())
  nombre        String
  ubicacion     String  
  imagen        String?  // Imagen opcional


  partidos   partidos[]  // Relación inversa
}
model equipos {
  id_equipo           Int             @id @default(autoincrement())
  nombre              String?
  ciudad              String
  diciplinaid         Int

  // Relaciones
  partidos_local      partidos[]       @relation("equipo_local")
  partidos_visitante  partidos[]       @relation("equipo_visitante")

  equipo1             rolDeJuegos[]   @relation("equipo1")
  equipo2             rolDeJuegos[]   @relation("equipo2")

  diciplinas         diciplinas @relation(fields: [diciplinaid], references: [id_diciplinas], onDelete: Cascade)

  jugador             jugadores[]
  clasificacion       clasificacion[]
}

model rolDeJuegos {
  id_RolDeJuegos      Int             @id @default(autoincrement())
  disciplinaid        Int
  equipo1id           Int
  equipo2id           Int
  fecha               DateTime
  puntuacionEquipo1   Int
  puntuacionEquipo2   Int
  estado              String
  clasificadoid       Int
  faseTorneoid        Int

  // Relaciones (corregidas)
  equipo1             equipos         @relation("equipo1", fields: [equipo1id], references: [id_equipo], onDelete: Cascade)
  equipo2             equipos         @relation("equipo2", fields: [equipo2id], references: [id_equipo], onDelete: Cascade)
  faseTorneo     fasesTorneo      @relation(fields: [faseTorneoid], references: [id_fase_torneo], onDelete: Cascade)
  clasificado     clasificacion      @relation(fields: [clasificadoid], references: [id_clasificacion], onDelete: Cascade)
  diciplinas         diciplinas @relation(fields: [disciplinaid], references: [id_diciplinas], onDelete: Cascade)

}


model fasesTorneo {
  id_fase_torneo    Int    @id @default(autoincrement())
  nombre            String
  descripcion       String
  fechaInicio       DateTime
  fechaFin          DateTime

  // Relaciones
  RolDeJuegos   rolDeJuegos[] // Relación inversa
  partidos   partidos[] 
}

model clasificacion {
  id_clasificacion    Int   @id @default(autoincrement())
  equipoid            Int //aqui me falta la llave foranea para equipo
  puntosTotales       Int
  partidosJugados     Int
  partidosGanados     Int
  partidosPerdidos    Int
  puntosAFavor        Int
  puntosEnContra      Int
  puntosPorPartido    Int
  diferenciaPuntos    Int

  // Relaciones
  equipo equipos @relation(fields: [equipoid], references: [id_equipo], onDelete: Cascade)
  RolDeJuegos   rolDeJuegos[] // Relación inversa
  


}

model jugadores {
  id_jugador  Int   @id @default(autoincrement())
  nombre      String
  numero      Int
  posicion    String
  equipoid    Int //aqui me falta la llave foranea para equipo

  // Relaciones
  equipo equipos @relation(fields: [equipoid], references: [id_equipo], onDelete: Cascade)

}
model partidos {
  id_partido         Int      @id @default(autoincrement())
  fecha              DateTime
  hora               String
  equipoLocalid      Int
  equipoVisitanteid  Int
  canchaid           Int
  faseTorneoid       Int
  estado             String
  puntosLocal        Int
  puntosVisitante    Int

  // Relaciones 
  canchas          canchas           @relation(fields: [canchaid], references: [id_cancha], onDelete: Cascade)
  equipo_local    equipos           @relation("equipo_local", fields: [equipoLocalid], references: [id_equipo], onDelete: Cascade)
  equipo_visitante equipos          @relation("equipo_visitante", fields: [equipoVisitanteid], references: [id_equipo], onDelete: Cascade)
  fase_torneo     fasesTorneo      @relation(fields: [faseTorneoid], references: [id_fase_torneo], onDelete: Cascade)
}

 model puntosdeInteres {
  id_PuntosdeInteres  Int @id @default(autoincrement())
  nombre              String
  tipo                String
  ubicacion           String
  telefono            String
  imagen              String
  horarioAtencion     String
  calificacion        Float 
  
 }

 model diciplinas {
  id_diciplinas         Int @id @default(autoincrement())
  nombre              String
  categoria         String
  
  // Relaciones
  equipos           equipos[]
  RolDeJuegos      rolDeJuegos[]
  usuarios        usuarios[]
  grupos         grupos[]
 }

 model grupos {
  id_grupo            Int @id @default(autoincrement())
  nombre              String
  disciplinaid        Int
  // Relaciones
  diciplinas         diciplinas @relation(fields: [disciplinaid], references: [id_diciplinas], onDelete: Cascade)
  usuarios           usuarios[]

 }

model roles{
  id_rol             Int @id @default(autoincrement())
  nombre             String
  usuarios           usuarios[]
}








